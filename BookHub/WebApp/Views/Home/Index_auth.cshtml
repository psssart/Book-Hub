@using System.Text
@using Microsoft.IdentityModel.Tokens
@model WebApp.Models.HomeViewModel

@{
    ViewData["Title"] = "Books";
}
@* @if (!Model.ShowResults) { *@
@*     <div class="book-items"> *@
@*     @foreach (var item in Model.Books) *@
@*     { *@
@*         <div class="book-item"> *@
@*             <div class="book-item-box"> *@
@*                 <img src="data:image;base64,@Convert.ToBase64String(item.imageData)" width="175px" height="260px" alt="Picture not found!"/> *@
@*                 <div class="book-rating"> *@
@*                     <img class="rating-star" src="img/svg/rating-unchecked.svg" width="24px" height="24px" alt=""> *@
@*                     <div class="rating-score"> *@
@*                         @{ *@
@*                             int quantity = 0; *@
@*                             float sum = 0; *@
@*                         } *@
@*                         @foreach (var rating in Model.Ratings) *@
@*                         { *@
@*                             if (rating.BookId == item.Id) *@
@*                             { *@
@*                                 quantity++; *@
@*                                 sum += rating.Value; *@
@*                             } *@
@*                         } *@
@*                         @{ *@
@*                             float averageRating = quantity > 0 ? sum / quantity : 0; *@
@*                             string formattedRating = averageRating.ToString("0.0"); *@
@*                             int roundedRating = (int)Math.Round(averageRating); // Closest integer *@
@*                         } *@
@*                         $1$ Stars for rating and rating value #1# *@
@*                         <span style="text-align: center;">@formattedRating</span> *@
@*                     </div> *@
@*                     <div class="book-title">@Html.DisplayFor(modelItem => item.Tittle)</div> *@
@*                 </div> *@
@*                 <div class="author"> *@
@*                     @{ *@
@*                         var author = Model.BookAuthors.Where(ba => ba.BookId.Equals(item.Id)).Select(ba => ba.Author).ToList().FirstOrDefault(); *@
@*                     } *@
@*                     @if (author != null) *@
@*                     { *@
@*                         <span>@author.Name</span> *@
@*                     } *@
@* *@
@*                 </div> *@
@*             </div> *@
@*         </div> *@
@* *@
@*     } *@
@* </div> *@
@* } else { *@
    <div class="search_results">
        <div class="header2">
            <h3>Books</h3>
            <span><b>Found: @Model.Books.Count books</b></span>
            <span class="sort_label">Sort by:
                <select id="sortSelect" >
                    <option value="none"></option>
                    <option value="rating">Rating</option>
                    <option value="price">Price</option>
                    <option value="year">Year</option>
                </select>
                <button id="rotateButton"><span class="pyramid"></span></button>
                &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
                <button class="filterMenuButton">Filter</button>
            </span>
        </div>

        <div id="filterPanel" class="filterPanel">
            <h5 align="center">Filtering Settings</h5>
            <br/>
            <h6 align="center">Books Filter</h6>
            <br/>



            <span class="dropdownAut">
                <button class="dropbtnAut">Authors</button>
                <div class="dropdownAut-content">
                    @foreach (var bookAuthor in Model.BookAuthors.Select(ba => ba.Author).Distinct())
                    {
                        <label><input type="checkbox" value="@bookAuthor!.Id"/>@bookAuthor.Name</label>
                    }
                </div>
            </span>
            <span class="filterReset">
                <button class="filterResetbtn">Reset</button>
            </span>
            <span class="dropdownGen">
                <button class="dropbtnGen">Genres</button>
                <div class="dropdownGen-content">
                    @foreach (var bookGenre in Model.BookGenres.Select(bg => bg.Genre).Distinct())
                    {
                        <label><input type="checkbox" value="@bookGenre!.Id"/>@bookGenre.Name</label> 
                    }
                </div>
            </span>
            <br/>
            <span class="dropdownPub">
                <button class="dropbtnPub">Publishers</button>
                <div class="dropdownPub-content">
                    @foreach (var bookPub in Model.Books.Select(b => b.Publisher).Distinct())
                    {
                        <label><input type="checkbox" value="@bookPub!.Id"/>@bookPub.Name</label>
                    }
                </div>
            </span>
            <span class="dropdownWar">
                <button class="dropbtnWar">Warehouses</button>
                <div class="dropdownWar-content">
                    @*@foreach (var bookWar in Model.BookWarehouses.Select(bw => bw.Warehouse).Distinct())
                    {
                        <label><input type="checkbox" value="@bookWar!.Id"/>@bookWar.Name</label>
                    }*@
                </div>
            </span>
            <br/><br/><br/><br/>
            <h6 align="center">Authors Filter</h6>
            <br/>
        </div>

        @if (Model.Books.Any())
        {
            <div class="books_results">
                <table>
                    <thead>
                    <tr>
                        <th>Title</th>
                        <th></th>
                        <th>Price</th>
                        @if (!Model.BookAuthors.IsNullOrEmpty()) {<th>Authors</th>}
                        <th>Release Year</th>
                        <th>Rating</th>
                        @if (!Model.BookGenres.IsNullOrEmpty()) {<th>Genres</th>}
                        @*@if (!Model.BookWarehouses.IsNullOrEmpty()) {<th>Warehouses</th>}*@
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var book in Model.Books)
                    {
                        <tr>
                            <td id="book_picture">
                                <img src="data:image;base64,@Convert.ToBase64String(@book.imageData!)" width="260px" height="320px" alt=""/>
                            </td>
                            <td id="book_tittle"><a asp-area="" asp-controller="Books" asp-action="Details" asp-route-id="@book.Id">@book.Tittle</a></td>
                            <td>@book.Price$</td>
                            @if (!Model.BookAuthors.IsNullOrEmpty())
                            {
                                string authors = string.Join(", ", Model.BookAuthors
                                    .Where(ba => ba.BookId.Equals(book.Id))
                                    .Select(bookAuthor => bookAuthor.Author!.Name));
                                <td>@authors</td>
                            }
                            <td>@book.ReleaseYear</td>
                            <td>
                                @{
                                    int quantity = 0;
                                    float sum = 0;
                                }
                                @foreach (var rating in Model.Ratings)
                                {
                                    if (rating.BookId == book.Id)
                                    {
                                        quantity++;
                                        sum += rating.Value;
                                    }
                                }
                                @{
                                    float averageRating = quantity > 0 ? sum / quantity : 0;
                                    string formattedRating = averageRating.ToString("0.0");
                                    int roundedRating = (int)Math.Round(averageRating); // Closest integer
                                }
                                @* Stars for rating and rating value *@
                                <div style="font-size: x-large">@GenerateStarIcons(Convert.ToInt32(roundedRating))</div>
                                <span style="text-align: center;">@formattedRating</span>
                            </td>

                            @if (!Model.BookGenres.IsNullOrEmpty())
                            {
                                string genres = string.Join(", ", Model.BookGenres
                                    .Where(bg => bg.BookId.Equals(book.Id))
                                    .Select(bookGenre => bookGenre.Genre!.Name));
                                <td id="book_genres">@genres</td>
                            }

                            @*@if (!Model.BookWarehouses.IsNullOrEmpty())
                            {
                                string warehouses = string.Join(", ", Model.BookWarehouses
                                    .Where(bw => bw.BookId.Equals(book.Id))
                                    .Select(bookWarehouse => bookWarehouse.Warehouse!.Name));
                                <td>@warehouses</td>
                            }*@

                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="books_results">
                <p>No book results found.</p>
            </div>
        }

        <h3>Authors</h3>
        @if (Model.Authors.Any())
        {
            <div class="authors_results">
                <table>
                    <thead>
                    <tr>
                        <th>Name</th>
                        <th>Age</th>
                        <th>Biography</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var author in Model.Authors)
                    {
                        <tr>
                            <td><a asp-area="" asp-controller="Authors" asp-action="Details" asp-route-id="@author.Id">@author.Name</a></td>
                            <td>@author.Age</td>
                            <td>@author.Biography</td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="authors_results">
                <p>No author results found.</p>
            </div>
        }
    </div>


@functions
{
    // Helper function to generate star icons based on the rating value
    string GenerateStarIcons(int rating)
    {
        StringBuilder stars = new StringBuilder();
        for (int i = 0; i < 5; i++)
        {
            if (i < rating)
            {
                stars.Append("★"); // Full star
            }
            else
            {
                stars.Append("☆"); // Empty star
            }
        }
        return stars.ToString();
    }
}


<script src="~/js/book-title-size-handler.js" asp-append-version="true"></script>
@* <table class="table"> *@
@*   <thead> *@
@*   <tr> *@
@*       <th> *@
@*           Image *@
@*       </th> *@
@*       <th> *@
@*           @Html.DisplayNameFor(model => model.Books.Publisher) *@
@*       </th> *@
@*       <th> *@
@*           @Html.DisplayNameFor(model => model.Books.Tittle) *@
@*       </th> *@
@*       <th> *@
@*           @Html.DisplayNameFor(model => model.Books.Price) *@
@*       </th> *@
@*       <th> *@
@*           @Html.DisplayNameFor(model => model.Books.Description) *@
@*       </th> *@
@*       <th></th> *@
@*   </tr> *@
@*   </thead> *@
@* </table> *@
